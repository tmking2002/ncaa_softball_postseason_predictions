id = "spanner_2") %>%
tab_header(title = "2023 NCAA Tournament Predictions",
subtitle = "After 10000 Sims Using Model by @tking0426") %>%
gt_theme_espn() %>%
tab_options(heading.align = 'center')
table
View(proportions_2)
proportions <- find_proportions(results)
proportions <- proportions %>%
merge(logos, by.x = "team_name", by.y = "team")
proportions_1 <- proportions %>%
mutate(total = regionals + supers + semis + champs) %>%
arrange(desc(total)) %>%
head(n = 8)
proportions_2 <- proportions %>%
mutate(total = regionals + supers + semis + champs) %>%
arrange(desc(total)) %>%
filter(!(team_name %in% proportions_1$team_name)) %>%
head(n = 8)
table <- cbind(proportions_1, data.frame(X1 = "", X2 = ""), proportions_2) %>%
clean_names() %>%
select(logo, team_name, supers, semis, champs, x1, x2, logo_2, team_name_2, regionals_2, supers_2, semis_2, champs_2) %>%
gt() %>%
gt_img_rows(columns = logo) %>%
gt_img_rows(columns = logo_2) %>%
fmt_percent(c(3:5, 10:13), decimals = 1) %>%
cols_label(x1 = "", x2 = "",
logo = "", logo_2 = "",
team_name = "", team_name_2 = "",
supers = "WCWS", supers_2 = "WCWS",
semis = "Champ. Series", semis_2 = "Champ. Series",
champs = "Champion", champs_2 = "Champion") %>%
tab_style(style = cell_borders(sides = "left", color = "#d3d3d3"),
locations = list(cells_body(columns = x2),
cells_column_labels(columns = x2))) %>%
tab_style(style = cell_borders(sides = "left", style = "dashed", color = "#d3d3d3"),
locations = cells_body(columns = c(supers, supers_2))) %>%
tab_spanner(columns = 3:4,
label = "% Chance To Reach...",
id = "spanner_1") %>%
tab_spanner(columns = 10:12,
label = "% Chance To Reach...",
id = "spanner_2") %>%
tab_header(title = "2023 NCAA Tournament Predictions",
subtitle = "After 10000 Sims Using Model by @tking0426") %>%
gt_theme_espn() %>%
tab_options(heading.align = 'center')
table
table <- cbind(proportions_1, data.frame(X1 = "", X2 = ""), proportions_2) %>%
clean_names() %>%
select(logo, team_name, supers, semis, champs, x1, x2, logo_2, team_name_2, supers_2, semis_2, champs_2) %>%
gt() %>%
gt_img_rows(columns = logo) %>%
gt_img_rows(columns = logo_2) %>%
fmt_percent(c(3:5, 10:13), decimals = 1) %>%
cols_label(x1 = "", x2 = "",
logo = "", logo_2 = "",
team_name = "", team_name_2 = "",
supers = "WCWS", supers_2 = "WCWS",
semis = "Champ. Series", semis_2 = "Champ. Series",
champs = "Champion", champs_2 = "Champion") %>%
tab_style(style = cell_borders(sides = "left", color = "#d3d3d3"),
locations = list(cells_body(columns = x2),
cells_column_labels(columns = x2))) %>%
tab_style(style = cell_borders(sides = "left", style = "dashed", color = "#d3d3d3"),
locations = cells_body(columns = c(supers, supers_2))) %>%
tab_spanner(columns = 3:4,
label = "% Chance To Reach...",
id = "spanner_1") %>%
tab_spanner(columns = 10:12,
label = "% Chance To Reach...",
id = "spanner_2") %>%
tab_header(title = "2023 NCAA Tournament Predictions",
subtitle = "After 10000 Sims Using Model by @tking0426") %>%
gt_theme_espn() %>%
tab_options(heading.align = 'center')
table <- cbind(proportions_1, data.frame(X1 = "", X2 = ""), proportions_2) %>%
clean_names() %>%
select(logo, team_name, supers, semis, champs, x1, x2, logo_2, team_name_2, supers_2, semis_2, champs_2) %>%
gt() %>%
gt_img_rows(columns = logo) %>%
gt_img_rows(columns = logo_2) %>%
fmt_percent(c(3:5, 10:12), decimals = 1) %>%
cols_label(x1 = "", x2 = "",
logo = "", logo_2 = "",
team_name = "", team_name_2 = "",
supers = "WCWS", supers_2 = "WCWS",
semis = "Champ. Series", semis_2 = "Champ. Series",
champs = "Champion", champs_2 = "Champion") %>%
tab_style(style = cell_borders(sides = "left", color = "#d3d3d3"),
locations = list(cells_body(columns = x2),
cells_column_labels(columns = x2))) %>%
tab_style(style = cell_borders(sides = "left", style = "dashed", color = "#d3d3d3"),
locations = cells_body(columns = c(supers, supers_2))) %>%
tab_spanner(columns = 3:4,
label = "% Chance To Reach...",
id = "spanner_1") %>%
tab_spanner(columns = 10:12,
label = "% Chance To Reach...",
id = "spanner_2") %>%
tab_header(title = "2023 NCAA Tournament Predictions",
subtitle = "After 10000 Sims Using Model by @tking0426") %>%
gt_theme_espn() %>%
tab_options(heading.align = 'center')
table
View(proportions_1)
View(proportions_2)
proportions_1 <- proportions %>%
mutate(total = regionals + supers + semis + champs) %>%
arrange(desc(champs)) %>%
head(n = 8)
proportions_2 <- proportions %>%
mutate(total = regionals + supers + semis + champs) %>%
arrange(desc(champs)) %>%
filter(!(team_name %in% proportions_1$team_name)) %>%
head(n = 8)
table <- cbind(proportions_1, data.frame(X1 = "", X2 = ""), proportions_2) %>%
clean_names() %>%
select(logo, team_name, supers, semis, champs, x1, x2, logo_2, team_name_2, supers_2, semis_2, champs_2) %>%
gt() %>%
gt_img_rows(columns = logo) %>%
gt_img_rows(columns = logo_2) %>%
fmt_percent(c(3:5, 10:12), decimals = 1) %>%
cols_label(x1 = "", x2 = "",
logo = "", logo_2 = "",
team_name = "", team_name_2 = "",
supers = "WCWS", supers_2 = "WCWS",
semis = "Champ. Series", semis_2 = "Champ. Series",
champs = "Champion", champs_2 = "Champion") %>%
tab_style(style = cell_borders(sides = "left", color = "#d3d3d3"),
locations = list(cells_body(columns = x2),
cells_column_labels(columns = x2))) %>%
tab_style(style = cell_borders(sides = "left", style = "dashed", color = "#d3d3d3"),
locations = cells_body(columns = c(supers, supers_2))) %>%
tab_spanner(columns = 3:4,
label = "% Chance To Reach...",
id = "spanner_1") %>%
tab_spanner(columns = 10:12,
label = "% Chance To Reach...",
id = "spanner_2") %>%
tab_header(title = "2023 NCAA Tournament Predictions",
subtitle = "After 10000 Sims Using Model by @tking0426") %>%
gt_theme_espn() %>%
tab_options(heading.align = 'center')
table
install.packages("nflseedR")
library(nflseedR)
proportions_1 <- proportions %>%
mutate(champs = fmt_pct_special(champs)) %>%
arrange(desc(champs)) %>%
head(n = 8)
proportions_2 <- proportions %>%
mutate(champs = fmt_pct_special(champs)) %>%
arrange(desc(champs)) %>%
filter(!(team_name %in% proportions_1$team_name)) %>%
head(n = 8)
table <- cbind(proportions_1, data.frame(X1 = "", X2 = ""), proportions_2) %>%
clean_names() %>%
select(logo, team_name, supers, semis, champs, x1, x2, logo_2, team_name_2, supers_2, semis_2, champs_2) %>%
gt() %>%
gt_img_rows(columns = logo) %>%
gt_img_rows(columns = logo_2) %>%
fmt_percent(c(3:5, 10:12), decimals = 1) %>%
cols_label(x1 = "", x2 = "",
logo = "", logo_2 = "",
team_name = "", team_name_2 = "",
supers = "WCWS", supers_2 = "WCWS",
semis = "Champ. Series", semis_2 = "Champ. Series",
champs = "Champion", champs_2 = "Champion") %>%
tab_style(style = cell_borders(sides = "left", color = "#d3d3d3"),
locations = list(cells_body(columns = x2),
cells_column_labels(columns = x2))) %>%
tab_style(style = cell_borders(sides = "left", style = "dashed", color = "#d3d3d3"),
locations = cells_body(columns = c(supers, supers_2))) %>%
tab_spanner(columns = 3:4,
label = "% Chance To Reach...",
id = "spanner_1") %>%
tab_spanner(columns = 10:12,
label = "% Chance To Reach...",
id = "spanner_2") %>%
tab_header(title = "2023 NCAA Tournament Predictions",
subtitle = "After 10000 Sims Using Model by @tking0426") %>%
gt_theme_espn() %>%
tab_options(heading.align = 'center')
table
proportions <- proportions %>%
merge(logos, by.x = "team_name", by.y = "team")
proportions_1 <- proportions %>%
mutate(total = regionals + supers + semis + champs) %>%
arrange(desc(champs)) %>%
head(n = 8)
proportions_2 <- proportions %>%
mutate(total = regionals + supers + semis + champs) %>%
arrange(desc(champs)) %>%
filter(!(team_name %in% proportions_1$team_name)) %>%
head(n = 8)
table <- cbind(proportions_1, data.frame(X1 = "", X2 = ""), proportions_2) %>%
clean_names() %>%
select(logo, team_name, supers, semis, champs, x1, x2, logo_2, team_name_2, supers_2, semis_2, champs_2) %>%
gt() %>%
gt_img_rows(columns = logo) %>%
gt_img_rows(columns = logo_2) %>%
fmt_percent(c(3:5, 10:12), decimals = 1) %>%
cols_label(x1 = "", x2 = "",
logo = "", logo_2 = "",
team_name = "", team_name_2 = "",
supers = "WCWS", supers_2 = "WCWS",
semis = "Champ. Series", semis_2 = "Champ. Series",
champs = "Champion", champs_2 = "Champion") %>%
tab_style(style = cell_borders(sides = "left", color = "#d3d3d3"),
locations = list(cells_body(columns = x2),
cells_column_labels(columns = x2))) %>%
tab_style(style = cell_borders(sides = "left", style = "dashed", color = "#d3d3d3"),
locations = cells_body(columns = c(supers, supers_2))) %>%
tab_spanner(columns = 3:4,
label = "% Chance To Reach...",
id = "spanner_1") %>%
tab_spanner(columns = 10:12,
label = "% Chance To Reach...",
id = "spanner_2") %>%
tab_header(title = "2023 NCAA Tournament Predictions",
subtitle = "After 10000 Sims Using Model by @tking0426") %>%
gt_theme_espn() %>%
tab_options(heading.align = 'center')
logos <- rbind(load_espn_softball_scoreboard(2022)[c(2,4)] %>% `names<-`(c("team","logo")),
load_espn_softball_scoreboard(2022)[c(10,12)] %>% `names<-`(c("team","logo"))) %>%
distinct(team, logo) %>%
mutate(team = str_replace(team, "State", "St."),
team = str_replace(team, "Illinois", "Ill."),
team = str_replace(team, "Colorado", "Colo."),
team = str_replace(team, "Northern Kentucky", "Northern Ky."),
team = str_replace(team, "Boston University", "Boston U."),
team = str_replace(team, "Loyola Marymount", "LMU (CA)"),
team = str_replace(team, "Middle Tennessee", "Middle Tenn."),
team = str_replace(team, "Central Arkansas", "Central Ark."),
team = str_replace(team, "Long Island University", "LIU"),
team = str_replace(team, "&", "&amp;"),
team = str_replace(team, "North Carolina Central", "N.C. Central"),
team = str_replace(team, "Prairie View A&amp;M", "Prairie View")) %>%
rbind(data.frame(team = "George Mason", logo = "https://a.espncdn.com/combiner/i?img=/i/teamlogos/ncaa/500/2244.png&h=200&w=200"))
proportions <- proportions %>%
merge(logos, by.x = "team_name", by.y = "team")
proportions_1 <- proportions %>%
mutate(total = regionals + supers + semis + champs) %>%
arrange(desc(champs)) %>%
head(n = 8)
proportions_2 <- proportions %>%
mutate(total = regionals + supers + semis + champs) %>%
arrange(desc(champs)) %>%
filter(!(team_name %in% proportions_1$team_name)) %>%
head(n = 8)
table <- cbind(proportions_1, data.frame(X1 = "", X2 = ""), proportions_2) %>%
clean_names() %>%
select(logo, team_name, supers, semis, champs, x1, x2, logo_2, team_name_2, supers_2, semis_2, champs_2) %>%
gt() %>%
gt_img_rows(columns = logo) %>%
gt_img_rows(columns = logo_2) %>%
fmt_percent(c(3:5, 10:12), decimals = 1) %>%
cols_label(x1 = "", x2 = "",
logo = "", logo_2 = "",
team_name = "", team_name_2 = "",
supers = "WCWS", supers_2 = "WCWS",
semis = "Champ. Series", semis_2 = "Champ. Series",
champs = "Champion", champs_2 = "Champion") %>%
tab_style(style = cell_borders(sides = "left", color = "#d3d3d3"),
locations = list(cells_body(columns = x2),
cells_column_labels(columns = x2))) %>%
tab_style(style = cell_borders(sides = "left", style = "dashed", color = "#d3d3d3"),
locations = cells_body(columns = c(supers, supers_2))) %>%
tab_spanner(columns = 3:4,
label = "% Chance To Reach...",
id = "spanner_1") %>%
tab_spanner(columns = 10:12,
label = "% Chance To Reach...",
id = "spanner_2") %>%
tab_header(title = "2023 NCAA Tournament Predictions",
subtitle = "After 10000 Sims Using Model by @tking0426") %>%
gt_theme_espn() %>%
tab_options(heading.align = 'center')
table
gtsave(table, "predictions_table.png")
library(conflicted)
library(janitor)
library(MASS)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
source("betting_model/create_model.R")
get_info <- function(matchup){
updated <- matchup %>%
merge(pitcher_stats_upd %>% select(player, wFIP), by.x = "away_starting_pitcher", by.y = "player") %>%
rename(away_starter = wFIP) %>%
merge(pitcher_stats_upd %>% select(player, wFIP), by.x = "home_starting_pitcher", by.y = "player") %>%
rename(home_starter = wFIP) %>%
merge(power_ratings %>% select(team, offensive_rating, defensive_rating), by.x = "away_team", by.y = "team") %>%
rename(away_team_off_rating = offensive_rating,
away_team_def_rating = defensive_rating) %>%
merge(power_ratings %>% select(team, offensive_rating, defensive_rating), by.x = "home_team", by.y = "team") %>%
rename(home_team_off_rating = offensive_rating,
home_team_def_rating = defensive_rating)
return(updated)
}
sim_game <- function(matchup_info, num_sims){
away_pred <- predict(model, matchup_info %>% rename(off_rating = away_team_off_rating,
opp_def_rating = home_team_def_rating,
opp_starter = home_starter))
home_pred <- predict(model, matchup_info %>% rename(off_rating = home_team_off_rating,
opp_def_rating = away_team_def_rating,
opp_starter = away_starter))
scores <- data.frame()
for(i in 1:num_sims){
away_runs <- rpois(1, away_pred)
home_runs <- rpois(1, home_pred)
margin <- home_runs - away_runs
while(margin == 0){
away_runs <- rpois(1, away_pred / 7)
home_runs <- rpois(1, home_pred / 7)
margin <- home_runs - away_runs
}
scores <- rbind(scores, data.frame(home_runs, away_runs, margin) %>%
mutate(total = home_runs + away_runs))
if(i %% 100 == 0) print(i)
}
return(scores)
}
matchup <- data.frame(home_team = "Florida St.", home_starting_pitcher = "Sandercock, Kathryn",
away_team = "Georgia", away_starting_pitcher = "Walters, Shelby")
matchup_info <- get_info(matchup)
scores <- sim_game(matchup_info, 10000)
View(scores)
mean(scores$margin >= 2)
hist(scores$margin)
hist(scores$margin, breaks = c(-15, 15, 1))
hist(scores$margin, breaks = seq(-15, 15, 1))
matchup <- data.frame(away_team = "Oregon", away_starting_pitcher = "Hansen, Stevie",
home_team = "Oklahoma St.", home_starting_pitcher = "Maxwell, Kelly")
matchup_info <- get_info(matchup)
scores <- sim_game(matchup_info, 10000)
hist(scores$margin, breaks = seq(-15, 15, 1))
mean(scores$margin >= 2)
scores <- sim_game(matchup_info, 10000)
mean(scores$margin >= 2)
library(conflicted)
library(janitor)
library(MASS)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
source("betting_model/create_model.R")
get_info <- function(matchup){
updated <- matchup %>%
merge(pitcher_stats_upd %>% select(player, wFIP), by.x = "away_starting_pitcher", by.y = "player") %>%
rename(away_starter = wFIP) %>%
merge(pitcher_stats_upd %>% select(player, wFIP), by.x = "home_starting_pitcher", by.y = "player") %>%
rename(home_starter = wFIP) %>%
merge(power_ratings %>% select(team, offensive_rating, defensive_rating), by.x = "away_team", by.y = "team") %>%
rename(away_team_off_rating = offensive_rating,
away_team_def_rating = defensive_rating) %>%
merge(power_ratings %>% select(team, offensive_rating, defensive_rating), by.x = "home_team", by.y = "team") %>%
rename(home_team_off_rating = offensive_rating,
home_team_def_rating = defensive_rating)
return(updated)
}
sim_game <- function(matchup_info, num_sims){
away_pred <- predict(model, matchup_info %>% rename(off_rating = away_team_off_rating,
opp_def_rating = home_team_def_rating,
opp_starter = home_starter))
home_pred <- predict(model, matchup_info %>% rename(off_rating = home_team_off_rating,
opp_def_rating = away_team_def_rating,
opp_starter = away_starter))
scores <- data.frame()
for(i in 1:num_sims){
away_runs <- rpois(1, away_pred)
home_runs <- rpois(1, home_pred)
margin <- home_runs - away_runs
while(margin == 0){
away_runs <- rpois(1, away_pred / 7)
home_runs <- rpois(1, home_pred / 7)
margin <- home_runs - away_runs
}
scores <- rbind(scores, data.frame(home_runs, away_runs, margin) %>%
mutate(total = home_runs + away_runs))
if(i %% 100 == 0) print(i)
}
return(scores)
}
matchup <- data.frame(home_team = "Florida St.", home_starting_pitcher = "Sandercock, Kathryn",
away_team = "Georgia", away_starting_pitcher = "Walters, Shelby")
matchup_info <- get_info(matchup)
scores <- sim_game(matchup_info, 10000)
mean(scores$margin < 2)
mean(scores$margin >= 2)
hist(scores$margin, breaks = seq(-15, 15, 1))
options(warn = -1)
get_pitching_box <- function(id){
raw <- glue::glue("https://stats.ncaa.org/contests/{id}/box_score") %>%
readLines()
pitching_id <- raw[grep("\t   <a href=\"/game/box_score/", raw)] %>%
stringr::str_remove_all("\t   <a href=\"/game/box_score/|\">Box Score </a>")
raw <- glue::glue("https://stats.ncaa.org/game/box_score/{pitching_id}?year_stat_category_id=14961") %>%
rvest::read_html() %>%
rvest::html_table()
first_team <- as.character(raw[[6]][1,1])
second_team <- as.character(raw[[7]][1,1])
upd <- rbind(raw[[6]],raw[[7]]) %>%
`names<-`(raw[[6]][2,]) %>%
janitor::clean_names() %>%
dplyr::filter(!(player %in% c(first_team, second_team,"Player","Totals")))
upd$team <- ifelse(upd$player %in% raw[[6]]$X1, first_team, second_team)
upd$opponent <- ifelse(upd$team == first_team, second_team, first_team)
upd[upd == ""] <- "0"
upd[] <- lapply(upd, gsub, pattern="/", replacement="")
upd <- upd %>%
dplyr::mutate(across(3:26, as.numeric)) %>%
dplyr::filter(ip > 0) %>%
dplyr::mutate(game_id = id)
return(upd)
}
url_d1 <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/ncaa_scoreboard_2022.RDS?raw=true")
con <- url(url_d1)
on.exit(close(con))
scoreboard_d1 <- try(readRDS(con), silent = TRUE) %>%
distinct(game_id, game_date)
library(tidyverse)
library(softballR)
scoreboard_d1 <- try(readRDS(con), silent = TRUE) %>%
distinct(game_id, game_date)
game_ids_d1 <- scoreboard_d1 %>%  pull(game_id) %>% sort
get_ncaa_pitcher_player_box <- function(game_id){
i <<- i + 1
pitching <- try(get_pitching_box(game_id))
return(pitching)
}
i <- 0
box <- do.call(rbind, lapply(X = game_ids_d1, FUN = get_ncaa_pitcher_player_box))
box <- box %>%
filter(!str_detect(player,"Error : Document is empty|subscript out of bounds|Timeout was reached")) %>%
merge(scoreboard_d1, by = "game_id")
pitching_box_d1 <- box %>%
distinct()
View(pitching_box_d1)
saveRDS(object = pitching_box_d1, file = "data/d1_pitching_box_scores_2022.RDS")
setwd("~/Projects/softballR-data")
saveRDS(object = pitching_box_d1, file = "data/d1_pitching_box_scores_2022.RDS")
library(conflicted)
library(janitor)
library(MASS)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
source("betting_model/create_model.R")
get_info <- function(matchup){
updated <- matchup %>%
merge(pitcher_stats_upd %>% select(player, wFIP), by.x = "away_starting_pitcher", by.y = "player") %>%
rename(away_starter = wFIP) %>%
merge(pitcher_stats_upd %>% select(player, wFIP), by.x = "home_starting_pitcher", by.y = "player") %>%
rename(home_starter = wFIP) %>%
merge(power_ratings %>% select(team, offensive_rating, defensive_rating), by.x = "away_team", by.y = "team") %>%
rename(away_team_off_rating = offensive_rating,
away_team_def_rating = defensive_rating) %>%
merge(power_ratings %>% select(team, offensive_rating, defensive_rating), by.x = "home_team", by.y = "team") %>%
rename(home_team_off_rating = offensive_rating,
home_team_def_rating = defensive_rating)
return(updated)
}
sim_game <- function(matchup_info, num_sims){
away_pred <- predict(model, matchup_info %>% rename(off_rating = away_team_off_rating,
opp_def_rating = home_team_def_rating,
opp_starter = home_starter))
home_pred <- predict(model, matchup_info %>% rename(off_rating = home_team_off_rating,
opp_def_rating = away_team_def_rating,
opp_starter = away_starter))
scores <- data.frame()
for(i in 1:num_sims){
away_runs <- rpois(1, away_pred)
home_runs <- rpois(1, home_pred)
margin <- home_runs - away_runs
while(margin == 0){
away_runs <- rpois(1, away_pred / 7)
home_runs <- rpois(1, home_pred / 7)
margin <- home_runs - away_runs
}
scores <- rbind(scores, data.frame(home_runs, away_runs, margin) %>%
mutate(total = home_runs + away_runs))
if(i %% 100 == 0) print(i)
}
return(scores)
}
get_stats <- function(scores){
win_perc <- round_half_up(c(mean(scores$margin > 0) - .025,
mean(scores$margin > 0) + .025), 2)
median_runs <- round_half_up(c(quantile(scores$total, .4),
quantile(scores$total, .6)), 1)
return(list(win_perc, median_runs))
}
matchup <- data.frame(away_team = "Northwestern", away_starting_pitcher = "Williams, Danielle",
home_team = "Alabama", home_starting_pitcher = "Salter, Alex")
matchup_info <- get_info(matchup)
scores <- sim_game(matchup_info, 10000)
stats <- get_stats(scores)
stats[[1]]
stats[[2]]
mean(scores$margin >= 2)
mean(scores$total >= 8)
mean(scores$margin <= 2)
matchup <- data.frame(away_team = "San Diego St.", away_starting_pitcher = "Light, Allie",
home_team = "Utah", home_starting_pitcher = "Lopez, Mariah")
matchup_info <- get_info(matchup)
scores <- sim_game(matchup_info, 10000)
stats <- get_stats(scores)
stats[[1]]
stats[[2]]
mean(scores$margin >= 2)
mean(scores$margin >= 2)
mean(scores$total <= 9)
